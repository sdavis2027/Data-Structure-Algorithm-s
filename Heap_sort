#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;
/* 
 * Programmer: Steven Davis
 * Date: October, 3 2024
 * Location: sdavis/csc2710/sortpro/heapsort.cpp
 *
 * Description:  A program that completes a heapsort given a data set.
 *
 * How to compile: gpp  heapsort.cpp -o heapsort.out
 *
 * How to execute: ./heapsort.out
 *
 */
struct heap
{
    int* S; //s is indexed from 0 to (n-1)
    int heapsize; //only the values 0 - n
};

void siftdown(heap& H, int i, int& num_comparisons, int& swap_count)
{
    int parent, largerchild; //defining key charictistics in a heap
    int siftkey; // eventually will be assisinged to a node 
    bool spotfound; //to determine when to stop the while loop that primarly runs this function

    siftkey = H.S[i]; //point to the correct node
    parent = i; 
    spotfound = false; 

    while (2 * parent + 1 < H.heapsize && !spotfound)
    {
        num_comparisons++; // Increment comparison count
        if (2 * parent + 2 < H.heapsize && H.S[2 * parent + 1] < H.S[2 * parent + 2]) // we are checking that making our heap follows the correct definition of a heap
        {
            largerchild = 2 * parent + 2; // largerchild changes with the plus 2
        }
        else
        {
            largerchild = 2 * parent + 1; // chnages if the other condition is not true. only changes by 1 less in this case
        }

        num_comparisons++; // Increment comparison count
        if (siftkey < H.S[largerchild]) //check to see if we need to move parent and larger child
        {
            H.S[parent] = H.S[largerchild]; // swaping these
            parent = largerchild;
            swap_count++; //swap gets incremented
        }
        else
        {
            spotfound = true;
        }
    }

    H.S[parent] = siftkey; // parent node points to shift key
}

int root(heap& H, int& num_comparisons, int& swap_count) 
{
    int keyout = H.S[0]; // get key at root
    H.S[0] = H.S[H.heapsize - 1]; // move bottom key to root
    H.heapsize = H.heapsize - 1; // delete bottom node
    siftdown(H, 0, num_comparisons, swap_count); // resote heap defenition
    return keyout;
}

void removekeys(int n, heap& H, int S[], int& num_comparisons, int& swap_count)
{
    for (int i = n - 1; i >= 0; i--) // indexed from 1 - n
    {
        S[i] = root(H, num_comparisons, swap_count); // call root each time i get decremented in order to ensure proper remove 
    }
}

void makeheap(int n, heap& H, int& num_comparisons, int& swap_count)
{
    H.heapsize = n; // size should be same length as array
    for (int i = (n / 2) - 1; i >= 0; i--)
    {
        siftdown(H, i, num_comparisons, swap_count); // each time you make a new node shift this down
    }
}

void heapsort(int S[], int n, int& num_comparisons, int& swap_count) // final heapsort function
{
    heap H;
    H.S = S;
    makeheap(n, H, num_comparisons, swap_count);
    removekeys(n, H, S, num_comparisons, swap_count);
}

int main()
{
    int num_comparisons = 0;
    int swap_count = 0;
    long long start = 0;
    long long end = 0;
    /*
    int testsize = 1000;
    int test[1000] = {320, 886, 92, 993, 445, 976, 429, 87, 165, 705, 598, 643, 6, 833, 911, 223, 647, 103, 544, 871, 496, 845, 838, 12, 446,
810, 644, 626, 764, 975, 892, 763, 668, 733, 561, 679, 106, 718, 881, 384, 461, 715, 448, 981, 162, 404, 7, 94, 310, 752, 732, 99, 181, 428,
597, 27, 464, 636, 684, 355, 560, 425, 375, 788, 252, 344, 215, 254, 189, 328, 682, 290, 781, 789, 813, 198, 207, 146, 790, 392, 258, 600,
547, 942, 516, 367, 491, 225, 579, 860, 926, 804, 282, 139, 922, 296, 793, 904, 624, 77, 455, 596, 823, 971, 977, 839, 859, 157, 637, 120,
321, 199, 699, 648, 564, 843, 453, 379, 465, 466, 505, 185, 535, 498, 351, 243, 71, 869, 753, 854, 33, 119, 531, 893, 741, 26, 510, 950, 812,
332, 484, 179, 237, 339, 798, 620, 154, 1000, 366, 147, 31, 17, 228, 330, 878, 378, 301, 548, 707, 877, 450, 541, 177, 386, 18, 744, 40, 232,
914, 292, 858, 916, 432, 299, 619, 640, 395, 986, 249, 760, 302, 645, 14, 941, 616, 210, 725, 173, 246, 304, 805, 818, 408, 728, 795, 100,
222, 834, 394, 946, 503, 857, 743, 32, 691, 476, 317, 711, 472, 3, 997, 137, 35, 563, 418, 49, 836, 360, 661, 778, 78, 81, 689, 963, 359, 370,
842, 108, 424, 925, 528, 454, 167, 599, 902, 338, 55, 540, 792, 8, 217, 652, 397, 41, 722, 325, 422, 241, 126, 573, 480, 349, 208, 358, 888,
796, 861, 196, 312, 870, 151, 153, 551, 513, 697, 635, 523, 915, 962, 42, 342, 952, 884, 749, 903, 724, 514, 820, 305, 152, 614, 539, 24, 784,
628, 47, 966, 615, 550, 401, 124, 811, 826, 621, 856, 336, 201, 387, 500, 474, 487, 730, 853, 416, 409, 102, 307, 758, 709, 489, 212, 116,
313, 284, 221, 747, 66, 775, 693, 69, 101, 759, 678, 768, 369, 269, 944, 729, 493, 664, 672, 537, 646, 37, 172, 587, 415, 899, 825, 291, 607,
114, 638, 86, 654, 726, 821, 586, 495, 141, 757, 895, 374, 710, 405, 190, 901, 714, 924, 274, 365, 511, 434, 440, 281, 527, 417, 674, 534,
382, 159, 255, 592, 2, 303, 133, 608, 954, 912, 935, 898, 786, 809, 270, 140, 266, 671, 75, 512, 549, 93, 110, 936, 68, 554, 931, 765, 80,
998, 874, 309, 611, 482, 97, 293, 244, 402, 323, 419, 107, 273, 276, 361, 56, 663, 184, 657, 272, 98, 420, 327, 82, 211, 203, 882, 675, 987,
138, 406, 456, 939, 734, 940, 745, 245, 239, 814, 72, 770, 623, 411, 937, 125, 216, 508, 470, 634, 802, 343, 205, 806, 777, 30, 435, 322, 388,
988, 381, 700, 145, 934, 224, 883, 891, 552, 403, 128, 447, 873, 951, 521, 350, 568, 257, 25, 90, 822, 585, 999, 306, 932, 622, 63, 584, 832,
504, 36, 978, 132, 45, 1, 533, 542, 135, 287, 740, 979, 412, 353, 59, 52, 696, 676, 991, 955, 149, 572, 785, 161, 28, 961, 475, 315, 819, 46,
717, 160, 737, 308, 569, 144, 756, 111, 701, 352, 617, 688, 220, 267, 192, 380, 444, 426, 969, 148, 967, 463, 601, 150, 721, 289, 766, 719, 5,
260, 867, 526, 326, 499, 20, 319, 670, 451, 865, 485, 960, 662, 437, 73, 187, 945, 669, 984, 529, 681, 713, 329, 783, 115, 459, 174, 39, 261,
594, 171, 575, 831, 692, 863, 195, 54, 927, 848, 277, 889, 591, 197, 155, 48, 143, 930, 655, 990, 441, 816, 773, 318, 21, 268, 690, 771, 347,
852, 314, 423, 348, 602, 735, 827,
565, 750, 685, 194, 683, 89, 16, 438, 85, 357, 800, 815, 188, 694, 285, 218, 191, 335, 164, 964, 134, 761, 769, 76, 929, 264, 994, 364, 507,
840, 543, 829, 589, 570, 202, 452, 996, 762, 943, 427, 182, 74, 88, 658, 462, 603, 706, 799, 649, 193, 439, 974, 501, 656, 471, 906, 803, 324,
577, 844, 371, 9, 230, 398, 502, 4, 43, 253, 479, 478, 410, 885, 311, 250, 995, 665, 413, 686, 19, 233, 736, 123, 553, 175, 918, 767, 209,
879, 755, 38, 251, 896, 96, 695, 469, 407, 680, 131, 235, 604, 558, 742, 231, 168, 633, 113, 875, 286, 333, 522, 949, 95, 980, 837, 612, 373,
631, 650, 70, 855, 846, 206, 368, 557, 851, 830, 213, 136, 880, 751, 473, 163, 142, 659, 262, 653, 538, 546, 519, 390, 118, 53, 376, 968, 776,
708, 121, 497, 431, 772, 156, 396, 117, 920, 84, 651, 595, 247, 278, 112, 566, 234, 817, 923, 79, 530, 436, 265, 774, 300, 559, 468, 787, 295,
567, 748, 331, 130, 876, 229, 849, 953, 956, 582, 400, 562, 62, 158, 259, 905, 109, 629, 746, 973, 393, 850, 864, 104, 723, 226, 283, 477, 11,
702, 590, 739, 556, 263, 275, 824, 630, 334, 22, 983, 83, 385, 868, 992, 57, 345, 894, 340, 716, 667, 443, 828, 67, 492, 297, 238, 703, 506,
256, 467, 15, 481, 60, 890, 791, 29, 399, 58, 509, 170, 341, 938, 958, 279, 176, 129, 605, 337, 532, 921, 957, 571, 660, 200, 363, 515, 346,
588, 712, 494, 808, 627, 51, 520, 985, 91, 807, 780, 947, 928, 65, 389, 242, 965, 910, 887, 574, 545, 44, 524, 356, 61, 430, 536, 779, 580,
458, 593, 835, 948, 214, 900, 64, 618, 186, 391, 609, 271, 578, 227, 959, 909, 576, 460, 433, 727, 517, 298, 913, 632, 34, 613, 933, 248, 383,
639, 377, 797, 754, 166, 280, 105, 698, 178, 704, 866, 731, 183, 583, 801, 518, 204, 897, 50, 907, 919, 982, 240, 989, 488, 219, 169, 555,
970, 13, 862, 581, 362, 642, 917, 294, 354, 316, 421, 236, 414, 677, 666, 525, 908, 180, 288, 372, 457, 10, 442, 490, 841, 782, 122, 483, 449,
720, 738, 606, 687, 127, 872, 610, 486, 972, 641, 23, 625, 847, 794, 673 };
    num_comparisons = 0;
    swap_count = 0;
    start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    heapsort(test, testsize, num_comparisons, swap_count);
    end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "testarray: Randomly distributed (1000)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n";
*/
    // A 1: Randomly distributed (size 10)
    int numbers1[] = {6, 3, 8, 2, 7, 5, 1, 9, 4, 10};
    int size1 = 10;
    num_comparisons = 0;
    swap_count = 0;
    start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    heapsort(numbers1, size1, num_comparisons, swap_count);
    end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "Array 1: Randomly distributed (10)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";

    // Array 2: Almost sorted (size 10)
    int numbers2[] = {1, 2, 3, 4, 5, 8, 7, 6, 9, 10};
    int size2 = 10;
    num_comparisons = 0;
    swap_count = 0;
    start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    heapsort(numbers2, size2, num_comparisons, swap_count);
    end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "Array 2: Almost sorted (10)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";

    // Array 3: Reverse sorted (size 10)
    int numbers3[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    int size3 = 10;
    num_comparisons = 0;
    swap_count = 0;
    start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    heapsort(numbers3, size3, num_comparisons, swap_count);
    end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "Array 3: Reverse sorted (10)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";

    // Array 4: Many duplicates (size 10)
    int numbers4[] = {1, 1, 2, 2, 2, 3, 3, 4, 4, 5};
    int size4 = 10;
    num_comparisons = 0;
    swap_count = 0;
    start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    heapsort(numbers4, size4, num_comparisons, swap_count);
    end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "Array 4: Many duplicates (10)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";
    //Array 5: randomly distrubited (size 100)
        int numbers5[100] = 
        {
        59, 72, 25, 24, 92, 64, 65, 82, 12, 44, 80, 69, 68, 30, 35, 58, 26, 79, 75, 3,
        33, 47, 48, 55, 23, 89, 28, 71, 100, 46, 8, 66, 2, 86, 40, 10, 56, 21, 73, 96,
        17, 6, 36, 62, 91, 61, 60, 20, 95, 38, 11, 9, 13, 32, 4, 37, 19, 93, 7, 94,
        99, 70, 52, 42, 77, 97, 67, 98, 74, 90, 34, 84, 16, 22, 88, 18, 81, 43, 76, 50,
        27, 83, 87, 41, 54, 1, 15, 51, 5, 14, 53, 63, 39, 78, 29, 45, 57, 85, 31, 49
        };
        int size5 = 100;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers5, size5, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 5: randomly distributed (100)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";
    //Array 6: almost sorted (size 100) 
        int numbers6[100] = 
        {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        63, 76, 48, 52, 99, 81, 46, 73, 45, 64, 92, 40, 88, 91, 59, 86, 66, 54, 70, 100, 
        82, 42, 78, 47, 60, 97, 90, 68, 77, 85, 72, 62, 43, 55, 65, 87, 67, 41, 75, 44, 
        71, 80, 50, 53, 93, 61, 49, 96, 83, 57, 58, 94, 74, 95, 84,
        };
        int size6 = 100;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers6, size6, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 6: almost sorted\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";
    //array 7: reverse sorted (size 100)
        int numbers7[100] = 
        {
        100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 
        80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 
        60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 
        40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 
        20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
        };
        int size7 = 100;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers7, size7, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 7: reverse sorted (100)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";
    //array 8: many duplicates (size 100)
        int numbers8[100] = 
        {
        23, 45, 23, 67, 23, 89, 45, 23, 12, 45, 67, 23, 23, 12, 67, 89, 45, 23, 45, 12,
        67, 89, 45, 23, 12, 23, 45, 67, 89, 12, 45, 23, 67, 23, 89, 12, 45, 67, 89, 45,
        23, 12, 67, 89, 45, 23, 12, 45, 67, 23, 12, 67, 89, 45, 23, 23, 12, 45, 67, 23,
        89, 45, 12, 67, 23, 45, 23, 67, 89, 12, 45, 23, 89, 45, 67, 12, 23, 12, 45, 67,
        89, 23, 45, 23, 67, 89, 45, 12, 67, 12, 45, 23, 67, 89, 12
        };
        int size8 = 100;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers8, size8, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 8: many duplicates (100)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";
    //array 9: almost sorted (size 1000)
        int numbers9[1000] = 
        {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
        45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
        66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
        87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
        107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
        125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
        179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
        197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
        215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
        233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
        269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
        287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
        305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
        323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
        359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
        377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
        395, 396, 397, 398, 399, 785, 912, 513, 476, 690, 822, 411, 749, 526, 855, 495, 678, 818,
        441, 624, 466, 789, 855, 641, 942, 511, 493, 866, 704, 873, 932, 405, 733, 427, 928, 654,
        672, 865, 485, 617, 906, 885, 497, 688, 538, 963, 501, 570, 706, 529, 463, 540, 611, 934,
        924, 523, 653, 587, 444, 718, 561, 791, 482, 560, 913, 654, 499, 734, 470, 707, 703, 470,
        451, 626, 629, 941, 482, 759, 641, 846, 631, 950, 927, 547, 877, 437, 443, 658, 756, 473,
        816, 866, 752, 571, 948, 436, 477, 839, 515, 440, 685, 561, 407, 660, 572, 723, 847, 890,
        593, 598, 577, 863, 437, 911, 555, 640, 765, 868, 541, 765, 774, 898, 751, 643, 578, 953,
        841, 459, 490, 450, 423, 805, 574, 498, 754, 530, 692, 790, 572, 496, 490, 904, 469, 535,
        484, 464, 461, 477, 917, 647, 670, 616, 601, 556, 733, 859, 467, 564, 806, 661, 418, 844,
        463, 785, 563, 684, 639, 492, 615, 913, 737, 571, 470, 712, 689, 487, 482, 619, 917, 844,
        745, 739, 590, 467, 722, 688, 938, 414, 568, 461, 470, 522, 840, 686, 557, 760, 404, 505,
        494, 632, 730, 559, 915, 466, 726, 707, 785, 631, 642, 908, 678, 730, 532, 572, 580, 825,
        785, 672, 401, 767, 489, 606, 447, 671, 425, 822, 709, 508, 710, 474, 457, 494, 671, 547,
        616, 511, 719, 770, 510, 947, 583, 654, 769, 928, 514, 731, 918, 476, 617, 879, 519, 721,
        898, 494, 885, 909, 679, 672, 711, 855, 949, 442, 563, 698, 442, 713, 484, 615, 692, 508,
        461, 735, 474, 442, 479, 912, 712, 473, 700, 862, 525, 851, 852, 641, 682, 918, 812, 682,
        787, 400, 850, 876, 921, 825, 464, 906, 542, 466, 452, 651, 523, 676, 516, 531, 464, 491,
        608, 752, 418, 928, 515, 631, 525, 828, 726, 824, 809, 707, 579, 774, 697, 672, 569, 483,
        568, 760, 944, 568, 949, 401, 726, 867, 662, 664, 755, 444, 878, 538, 401, 547, 643, 626,
        516, 463, 942, 776, 438, 892, 664, 520, 661, 600, 773, 662, 844, 437, 559, 907, 801, 691,
        515, 707, 850, 849, 580, 746, 649, 804, 667, 440, 767, 689, 638, 860, 448, 891, 650, 571,
        542, 478, 771, 478, 536, 725, 444, 452, 901, 792, 441, 764, 421, 778, 825, 693, 640, 748,
        414, 485, 664, 575, 558, 773, 873, 640, 709, 575, 545, 749, 560, 663, 647, 691, 726, 474,
        442, 401, 842, 703, 496, 870, 747, 718, 613, 921, 497, 478, 577, 693, 861, 584, 919, 622,
        446, 456, 610, 785, 496, 837, 450, 733, 947, 451, 640, 773, 507, 865, 522, 920, 844, 860,
        510, 484, 943, 929, 622, 650, 690, 800, 877, 605, 436, 539, 766, 806, 871, 715, 595, 400,
        877, 889, 693, 835, 885, 748, 706, 855, 822, 594, 512, 923, 595, 653, 616, 648, 698, 796,
        667, 888, 496, 475, 494, 572, 865, 510, 561, 745, 466, 633, 704, 693, 796, 497, 510, 773,
        707, 792, 896, 914, 441, 665, 660, 929, 825, 666, 437, 768, 578, 561, 623, 885, 445, 844,
        537, 550, 590, 723, 634, 746, 607, 515, 798, 893, 823, 614, 594, 647, 786, 834, 688, 648,
        658, 470, 902, 556, 461, 597, 699, 483, 840, 719, 589, 809, 682, 926, 788, 601, 600, 586,
        889, 889, 746, 570, 400, 558, 928
        };
        int size9 = 1000;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers9, size9, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 9: Almost Sorted (1000)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";
    //array 10: reverse sorted(size 1000)
    int numbers10[1000] = {
        1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 
        981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 
        962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 
        943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 
        924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 
        905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 
        886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 
        867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 
        848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 
        829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 
        810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 
        791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 
        772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 
        753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 
        734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 
        715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 
        696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 
        677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 
        658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 
        639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 
        620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 
        601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 
        583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 
        564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 
        545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 
        526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 
        507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 
        488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 
        469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 
        450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 
        431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 
        412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 
        393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 
        374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 
        355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 
        336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 
        317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 
        298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 
        279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 
        260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 
        241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 
        222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 
        203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 
        185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 
        166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 
        147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 
        128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 
        109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 
        88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 
        64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 
        40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 
        16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        int size10 = 1000;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers10, size10, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 10: reverse Sorted (1000)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";    
  //array 11: randomly ordered (1000)
    int numbers11[1000] = {
        286, 171, 640, 74, 804, 760, 657, 95, 550, 651, 175, 4, 93, 143, 347, 259, 961, 468, 587, 154,
        386, 434, 252, 7, 415, 671, 962, 903, 181, 755, 377, 970, 790, 68, 104, 1000, 677, 982, 144, 708,
        327, 17, 491, 878, 234, 653, 245, 938, 521, 929, 779, 331, 103, 343, 618, 164, 224, 936, 284, 726,
        176, 956, 836, 371, 713, 592, 570, 917, 289, 361, 490, 6, 740, 365, 285, 37, 263, 830, 42, 566,
        795, 628, 882, 688, 757, 358, 762, 552, 844, 741, 686, 787, 346, 306, 776, 859, 899, 585, 560, 282,
        679, 577, 61, 780, 553, 463, 28, 792, 183, 854, 461, 609, 533, 510, 149, 425, 180, 621, 812, 600,
        20, 632, 805, 305, 407, 31, 921, 847, 329, 148, 843, 785, 516, 213, 166, 138, 995, 732, 985, 562,
        136, 523, 965, 109, 918, 220, 733, 743, 433, 2, 705, 452, 926, 528, 232, 543, 67, 231, 555, 47, 385,
        886, 752, 579, 413, 87, 14, 435, 69, 465, 445, 949, 351, 656, 348, 532, 581, 326, 11, 817, 333, 262,
        659, 197, 953, 631, 429, 273, 958, 909, 580, 968, 281, 497, 472, 954, 536, 379, 980, 204, 364, 155,
        495, 588, 373, 314, 111, 85, 147, 75, 396, 173, 355, 410, 84, 124, 749, 889, 808, 673, 48, 649, 218,
        494, 141, 981, 650, 848, 21, 979, 384, 303, 506, 826, 663, 724, 264, 376, 661, 474, 864, 22, 57, 208,
        747, 725, 293, 652, 789, 727, 185, 318, 558, 922, 375, 158, 639, 504, 207, 432, 488, 745, 92, 884, 761,
        879, 260, 493, 298, 121, 228, 619, 676, 704, 344, 381, 96, 687, 591, 606, 858, 990, 840, 764, 229, 53,
        118, 214, 897, 319, 378, 978, 247, 645, 129, 530, 873, 215, 538, 427, 998, 135, 236, 77, 662, 437, 907,
        80, 243, 831, 655, 622, 624, 422, 667, 71, 209, 134, 132, 706, 3, 914, 41, 701, 417, 117, 12, 644, 292,
        315, 256, 296, 583, 182, 987, 593, 612, 738, 307, 251, 774, 535, 853, 927, 160, 244, 539, 394, 697, 753,
        114, 323, 615, 287, 912, 283, 568, 596, 106, 660, 940, 405, 934, 955, 308, 520, 489, 556, 190, 947, 827,
        105, 731, 479, 819, 73, 341, 23, 857, 184, 223, 509, 367, 948, 389, 174, 895, 420, 691, 448, 188, 925,
        939, 658, 664, 492, 503, 480, 499, 988, 547, 443, 310, 730, 79, 340, 501, 794, 742, 811, 486, 467, 423,
        253, 431, 508, 320, 116, 94, 573, 698, 97, 855, 242, 824, 758, 633, 564, 122, 942, 356, 916, 418, 714,
        875, 642, 153, 931, 398, 967, 372, 395, 684, 449, 115, 584, 500, 444, 271, 734, 481, 168, 156, 440, 336,
        300, 772, 735, 603, 957, 334, 430, 992, 716, 369, 887, 983, 807, 10, 505, 595, 125, 442, 502, 906, 304,
        72, 294, 524, 800, 582, 402, 101, 330, 279, 219, 932, 142, 531, 206, 483, 567, 511, 692, 128, 601, 946,
        324, 354, 690, 393, 890, 517, 545, 670, 877, 49, 626, 328, 551, 302, 345, 542, 869, 36, 428, 63, 192,
        170, 403, 680, 9, 275, 464, 782, 392, 537, 883, 862, 728, 754, 40, 868, 513, 397, 470, 15, 576, 777,
        737, 76, 746, 856, 975, 462, 627, 563, 221, 668, 788, 159, 288, 554, 202, 255, 682, 874, 518, 177, 943,
        250, 313, 736, 119, 565, 654, 471, 100, 46, 809, 915, 352, 278, 186, 616, 575, 756, 25, 678, 586, 598,
        44, 546, 496, 226, 823, 718, 637, 771, 893, 748, 239, 35, 643, 419, 233, 78, 66, 350, 834, 269, 561, 891,
        768, 163, 810, 140, 196, 26, 647, 39, 230, 137, 120, 193, 18, 280, 404, 608, 872, 739, 409, 769, 98, 683,
        572, 363, 689, 729, 237, 870, 476, 861, 695, 457, 860, 852, 83, 820, 421, 880, 526, 368, 534, 904, 722,
        590, 703, 357, 5, 557, 456, 885, 952, 426, 937, 699, 669, 574, 487, 198, 894, 723, 717, 322, 707, 522,
        991, 485, 64, 45, 146, 905, 835, 391, 108, 602, 91, 666, 55, 696, 950, 167, 162, 388, 548, 923, 338, 316,
        24, 515, 976, 359, 599, 933, 70, 33, 613, 525, 459, 406, 81, 32, 924, 51, 441, 473, 424, 374, 544, 88,
        711, 675, 241, 969, 13, 709, 951, 796, 974, 107, 446, 945, 821, 150, 960, 833, 959, 839, 803, 235, 469,
        527, 342, 276, 549, 366, 194, 436, 216, 169, 814, 806, 665, 559, 477, 863, 541, 475, 195, 694, 881, 589,
        571, 161, 825, 205, 896, 850, 337, 52, 455, 908, 291, 16, 460, 238, 145, 993, 700, 607, 813, 822, 225,
        770, 849, 453, 681, 187, 999, 38, 482, 793, 944, 750, 971, 82, 866, 297, 876, 712, 466, 126, 383, 277,
        996, 984, 268, 638, 248, 685, 29, 309, 257, 763, 311, 349, 634, 380, 865, 133, 919, 199, 514, 888, 99,
        900, 816, 65, 112, 387, 339, 362, 1, 721, 625, 123, 846, 451, 920, 438, 898, 620, 569, 837, 710, 58,
        963, 212, 43, 62, 227, 578, 217, 240, 34, 802, 997, 911, 519, 165, 30, 529, 646, 702, 611, 390, 913,
        941, 102, 902, 744, 178, 972, 910, 312, 832, 871, 842, 203, 325, 399, 360, 614, 86, 439, 636, 989,
        605, 818, 798, 973, 201, 8, 131, 478, 317, 267, 784, 841, 778, 994, 130, 484, 295, 851, 623, 775,
        249, 272, 210, 382, 540, 50, 783, 258, 60, 766, 693, 19, 266, 610, 321, 370, 191, 767, 274, 152,
        801, 719, 815, 641, 838, 450, 964, 674, 222, 498, 617, 139, 720, 635, 597, 867, 629, 335, 765,
        59, 781, 400, 458, 630, 90, 935, 507, 110, 977, 332, 648, 845, 892, 773, 301, 261, 270, 412,
        786, 791, 113, 200, 353, 751, 246, 254, 966, 454, 672, 930, 401, 759, 594, 799, 299, 829, 189,
        416, 928, 408, 512, 211, 127, 27, 157, 986, 172, 414, 179, 151, 447, 715, 54, 89, 290, 901,
        828, 411, 604, 56, 265, 797};
        int size11 = 1000;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers11, size11, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 11: randomly ordered (1000)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";
    //array 12: many duplicates (100)
        int numbers12[1000] = {
        297, 22, 15, 22, 488, 97, 220, 291, 114, 371, 90, 451, 142, 7, 275, 145, 187, 141, 312, 
        49, 202, 264, 248, 15, 463, 173, 352, 99, 342, 141, 125, 373, 19, 68, 223, 413, 244, 322, 
        173, 73, 15, 14, 378, 189, 268, 99, 146, 101, 78, 486, 6, 299, 16, 240, 293, 268, 4, 241, 
        196, 388, 238, 471, 259, 209, 374, 6, 292, 450, 88, 38, 77, 192, 264, 185, 150, 45, 499, 67, 
        130, 242, 258, 385, 303, 44, 145, 84, 79, 187, 170, 161, 135, 249, 348, 99, 14, 31, 394, 77, 
        257, 72, 99, 203, 203, 479, 134, 392, 190, 92, 6, 367, 91, 369, 222, 176, 4, 4, 55, 87, 24, 
        274, 40, 238, 132, 408, 231, 237, 38, 274, 181, 52, 6, 124, 27, 479, 297, 226, 280, 161, 90, 
        463, 189, 129, 50, 256, 98, 475, 238, 42, 66, 310, 118, 116, 163, 363, 44, 164, 1, 185, 33, 
        206, 27, 186, 287, 407, 54, 55, 317, 42, 30, 493, 86, 227, 294, 157, 313, 227, 337, 369, 92, 
        177, 5, 36, 3, 415, 59, 229, 47, 69, 44, 451, 495, 471, 30, 172, 47, 12, 499, 116, 63, 399, 
        28, 394, 235, 284, 95, 154, 38, 92, 164, 147, 358, 271, 282, 486, 44, 106, 56, 16, 25, 9, 
        254, 114, 121, 239, 338, 453, 159, 45, 75, 70, 233, 106, 148, 115, 172, 24, 209, 149, 51, 
        142, 295, 115, 212, 71, 226, 10, 196, 60, 49, 374, 255, 277, 420, 364, 405, 462, 232, 366,
        152, 372, 75, 24, 329, 326, 477, 34, 218, 222, 496, 196, 99, 92, 11, 341, 177, 46, 217, 396, 
        328, 297, 231, 196, 27, 52, 3, 308, 183, 332, 221, 375, 75, 20, 162, 42, 170, 47, 183, 277, 
        153, 78, 86, 253, 317, 232, 173, 329, 463, 358, 253, 163, 295, 71, 37, 327, 288, 282, 104, 56, 
        353, 327, 276, 54, 344, 99, 185, 493, 49, 64, 222, 192, 470, 1, 385, 180, 143, 20, 109, 249, 
        495, 285, 373, 56, 129, 135, 210, 43, 469, 9, 399, 104, 285, 347, 44, 397, 264, 76, 434, 297, 
        117, 249, 77, 63, 77, 345, 91, 47, 25, 203, 48, 438, 142, 119, 77, 117, 63, 59, 162, 408, 60, 
        3, 273, 20, 132, 225, 60, 200, 165, 63, 291, 88, 173, 392, 263, 207, 274, 171, 198, 38, 17, 
        374, 283, 238, 14, 160, 299, 172, 420, 306, 32, 302, 257, 250, 405, 24, 125, 1, 134, 7, 209, 
        92, 67, 136, 109, 72, 372, 301, 211, 155, 29, 476, 392, 120, 119, 353, 355, 271, 237, 125, 
        413, 173, 191, 182, 77, 350, 464, 228, 193, 252, 368, 482, 445, 292, 378, 299, 415, 151, 295, 
        174, 84, 163, 408, 372, 208, 332, 420, 47, 109, 206, 385, 83, 157, 282, 77, 164, 117, 33, 21, 
        238, 137, 26, 265, 90, 133, 234, 482, 8, 22, 366, 334, 420, 404, 34, 141, 285, 142, 171, 305, 
        373, 287, 133, 284, 335, 145, 243, 30, 299, 181, 353, 62, 370, 217, 46, 404, 290, 397, 56, 158, 
        34, 285, 63, 57, 376, 487, 45, 4, 139, 188, 346, 80, 152, 108, 232, 440, 390, 319, 166, 282, 259, 
        307, 295, 413, 497, 191, 364, 52, 213, 164, 438, 205, 113, 94, 144, 182, 464, 249, 49, 44, 208, 377, 
        66, 16, 56, 490, 292, 119, 493, 78, 199, 30, 69, 455, 167, 244, 49, 165, 110, 58, 476, 90, 32, 105, 
        174, 157, 56, 115, 55, 6, 15, 181, 69, 254, 486, 198, 73, 144, 47, 14, 484, 164, 255, 32, 120, 281, 
        71, 99, 455, 213, 221, 197, 250, 389, 191, 117, 250, 487, 19, 240, 20, 490, 182, 43, 371, 267, 178, 
        32, 487, 444, 289, 156, 113, 91, 67, 307, 298, 99, 170, 183, 151, 394, 102, 202, 396, 191, 200, 221, 
        278, 407, 250, 153, 80, 12, 329, 1, 243, 27, 151, 337, 373, 217, 346, 397, 13, 57, 295, 300, 271, 
        38, 199, 230, 277, 160, 366, 495};
        int size12 = 1000;
        num_comparisons = 0;
        swap_count = 0;
        start = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        heapsort(numbers12, size12, num_comparisons, swap_count);
        end = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
        cout << "Array 12: many duplicutes (1000)\nComparisons: " << num_comparisons << ", Swaps: " << swap_count << ", Time: " << (end - start) << " microseconds\n\n";   
   return 0;
}

