#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

// initializes array, sets left mid and right as indexes of children arrays, includes counters merges,swap and compares to track info
void merge(int arr[], int left, int mid, int right, int &merges, int& swap, int& compares)
{
    merges++;

    // sets n1 and n2 as ints to determine size of child arrays
    int n1 = mid - left + 1;
    int n2 = right - mid;
    // creation of 2 subarrays and allocates memory to hold the elements of the left and right arrays
    int *leftarr = new int[n1];
    int *rightarr = new int[n2];

    // for loops to fill the arrays with elements copied from original array
    for (int i = 0; i < n1; i++)
    {
        leftarr[i] = arr[left + i];
    }
    for (int j = 0; j < n2; j++)
    {
        rightarr[j] = arr[mid + 1 + j];
    }
    // initializes indexs for kid arrays and k=first element of merged array
    int i, j, k;
    i = 0;
    j = 0;
    k = left;
    // compares elements from subarrays and sorts based on which element is smaller
    while (i < n1 && j < n2)
    {
        compares++;
        //checks if current element of left array is smaller or equal to right
        if (leftarr[i] <= rightarr[j])
        {
            //place element of left array in merged array
            arr[k] = leftarr[i];
            i++;
        }
        else
        {
            swap += (n1 - i);
            arr[k] = rightarr[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = leftarr[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = rightarr[j];
        j++;
        k++;
    }
    delete[] leftarr; // removes allocated memory
    delete[] rightarr;
}
void mergeSort(int arr[], int left, int right, int &merges, int &partitions, int &swap, int &compares)
{
    partitions++;
    // checks to see if array is already sorted
    if (left < right)
    {
        // computes mid index of the array
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid, merges, partitions,swap,compares);
        mergeSort(arr, mid + 1, right, merges, partitions,swap,compares);
        merge(arr, left, mid, right, merges, swap,compares);
    }
}
int main()
{
    //random
    int arr1[] = {6, 3, 8, 2, 7, 5, 1, 9, 4, 10};
    //almost sorted
    int arr2[] = {1, 2, 3, 4, 5, 8, 7, 6, 9, 10};
    //reverse sorted
    int arr3[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    //duplicates
    int arr4[] = {1, 1, 2, 2, 2, 3, 3, 4, 4, 5};
    //random 
    int arr5[] = {
        59, 72, 25, 24, 92, 64, 65, 82, 12, 44, 80, 69, 68, 30, 35, 58, 26, 79, 75, 3,
                  33, 47, 48, 55, 23, 89, 28, 71, 100, 46, 8, 66, 2, 86, 40, 10, 56, 21, 73, 96,
                  17, 6, 36, 62, 91, 61, 60, 20, 95, 38, 11, 9, 13, 32, 4, 37, 19, 93, 7, 94,
                  99, 70, 52, 42, 77, 97, 67, 98, 74, 90, 34, 84, 16, 22, 88, 18, 81, 43, 76, 50,
                  27, 83, 87, 41, 54, 1, 15, 51, 5, 14, 53, 63, 39, 78, 29, 45, 57, 85, 31, 49};
    //almost sorted              
    int arr6[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
        63, 76, 48, 52, 99, 81, 46, 73, 45, 64, 92, 40, 88, 91, 59, 86, 66, 54, 70, 100, 
        82, 42, 78, 47, 60, 97, 90, 68, 77, 85, 72, 62, 43, 55, 65, 87, 67, 41, 75, 44, 
        71, 80, 50, 53, 93, 61, 49, 96, 83, 57, 58, 94, 74, 95, 84,};
    //reverse sorted
    int arr7[] = {
        100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81,
        80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61,
        60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41,
        40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21,
        20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    //duplicates
    int arr8[] = {
        23, 45, 23, 67, 23, 89, 45, 23, 12, 45, 67, 23, 23, 12, 67, 89, 45, 23, 45, 12,
        67, 89, 45, 23, 12, 23, 45, 67, 89, 12, 45, 23, 67, 23, 89, 12, 45, 67, 89, 45,
        23, 12, 67, 89, 45, 23, 12, 45, 67, 23, 12, 67, 89, 45, 23, 23, 12, 45, 67, 23,
        89, 45, 12, 67, 23, 45, 23, 67, 89, 12, 45, 23, 89, 45, 67, 12, 23, 12, 45, 67,
        89, 23, 45, 23, 67, 89, 45, 12, 67, 12, 45, 23, 67, 89, 12
    };
    //almost sorted
    int arr9[] = {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
        24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 
        45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
        66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 
        87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
        107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 
        125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 
        161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 
        179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 
        197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 
        215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 
        233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 
        251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 
        269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 
        287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 
        305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 
        323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 
        341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 
        359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 
        377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 
        395, 396, 397, 398, 399, 785, 912, 513, 476, 690, 822, 411, 749, 526, 855, 495, 678, 818, 
        441, 624, 466, 789, 855, 641, 942, 511, 493, 866, 704, 873, 932, 405, 733, 427, 928, 654, 
        672, 865, 485, 617, 906, 885, 497, 688, 538, 963, 501, 570, 706, 529, 463, 540, 611, 934, 
        924, 523, 653, 587, 444, 718, 561, 791, 482, 560, 913, 654, 499, 734, 470, 707, 703, 470, 
        451, 626, 629, 941, 482, 759, 641, 846, 631, 950, 927, 547, 877, 437, 443, 658, 756, 473, 
        816, 866, 752, 571, 948, 436, 477, 839, 515, 440, 685, 561, 407, 660, 572, 723, 847, 890, 
        593, 598, 577, 863, 437, 911, 555, 640, 765, 868, 541, 765, 774, 898, 751, 643, 578, 953, 
        841, 459, 490, 450, 423, 805, 574, 498, 754, 530, 692, 790, 572, 496, 490, 904, 469, 535, 
        484, 464, 461, 477, 917, 647, 670, 616, 601, 556, 733, 859, 467, 564, 806, 661, 418, 844, 
        463, 785, 563, 684, 639, 492, 615, 913, 737, 571, 470, 712, 689, 487, 482, 619, 917, 844, 
        745, 739, 590, 467, 722, 688, 938, 414, 568, 461, 470, 522, 840, 686, 557, 760, 404, 505, 
        494, 632, 730, 559, 915, 466, 726, 707, 785, 631, 642, 908, 678, 730, 532, 572, 580, 825, 
        785, 672, 401, 767, 489, 606, 447, 671, 425, 822, 709, 508, 710, 474, 457, 494, 671, 547, 
        616, 511, 719, 770, 510, 947, 583, 654, 769, 928, 514, 731, 918, 476, 617, 879, 519, 721, 
        898, 494, 885, 909, 679, 672, 711, 855, 949, 442, 563, 698, 442, 713, 484, 615, 692, 508, 
        461, 735, 474, 442, 479, 912, 712, 473, 700, 862, 525, 851, 852, 641, 682, 918, 812, 682, 
        787, 400, 850, 876, 921, 825, 464, 906, 542, 466, 452, 651, 523, 676, 516, 531, 464, 491, 
        608, 752, 418, 928, 515, 631, 525, 828, 726, 824, 809, 707, 579, 774, 697, 672, 569, 483, 
        568, 760, 944, 568, 949, 401, 726, 867, 662, 664, 755, 444, 878, 538, 401, 547, 643, 626, 
        516, 463, 942, 776, 438, 892, 664, 520, 661, 600, 773, 662, 844, 437, 559, 907, 801, 691, 
        515, 707, 850, 849, 580, 746, 649, 804, 667, 440, 767, 689, 638, 860, 448, 891, 650, 571, 
        542, 478, 771, 478, 536, 725, 444, 452, 901, 792, 441, 764, 421, 778, 825, 693, 640, 748, 
        414, 485, 664, 575, 558, 773, 873, 640, 709, 575, 545, 749, 560, 663, 647, 691, 726, 474, 
        442, 401, 842, 703, 496, 870, 747, 718, 613, 921, 497, 478, 577, 693, 861, 584, 919, 622, 
        446, 456, 610, 785, 496, 837, 450, 733, 947, 451, 640, 773, 507, 865, 522, 920, 844, 860, 
        510, 484, 943, 929, 622, 650, 690, 800, 877, 605, 436, 539, 766, 806, 871, 715, 595, 400, 
        877, 889, 693, 835, 885, 748, 706, 855, 822, 594, 512, 923, 595, 653, 616, 648, 698, 796, 
        667, 888, 496, 475, 494, 572, 865, 510, 561, 745, 466, 633, 704, 693, 796, 497, 510, 773, 
        707, 792, 896, 914, 441, 665, 660, 929, 825, 666, 437, 768, 578, 561, 623, 885, 445, 844, 
        537, 550, 590, 723, 634, 746, 607, 515, 798, 893, 823, 614, 594, 647, 786, 834, 688, 648, 
        658, 470, 902, 556, 461, 597, 699, 483, 840, 719, 589, 809, 682, 926, 788, 601, 600, 586, 
        889, 889, 746, 570, 400, 558, 928};
    //reverse sorted
    int arr10[] = {
        1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982,
        981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963,
        962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944,
        943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925,
        924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906,
        905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887,
        886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868,
        867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849,
        848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830,
        829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811,
        810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792,
        791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773,
        772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754,
        753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735,
        734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716,
        715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697,
        696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678,
        677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659,
        658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640,
        639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621,
        620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602,
        601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584,
        583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565,
        564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546,
        545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527,
        526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508,
        507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489,
        488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470,
        469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451,
        450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432,
        431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413,
        412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394,
        393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375,
        374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356,
        355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337,
        336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318,
        317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299,
        298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280,
        279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261,
        260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242,
        241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223,
        222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204,
        203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186,
        185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167,
        166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148,
        147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129,
        128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110,
        109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89,
        88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65,
        64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41,
        40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
        16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    //random sort
    int arr11[] = {
        286, 171, 640, 74, 804, 760, 657, 95, 550, 651, 175, 4, 93, 143, 347, 259, 961, 468, 587, 154,
        386, 434, 252, 7, 415, 671, 962, 903, 181, 755, 377, 970, 790, 68, 104, 1000, 677, 982, 144, 708,
        327, 17, 491, 878, 234, 653, 245, 938, 521, 929, 779, 331, 103, 343, 618, 164, 224, 936, 284, 726,
        176, 956, 836, 371, 713, 592, 570, 917, 289, 361, 490, 6, 740, 365, 285, 37, 263, 830, 42, 566,
        795, 628, 882, 688, 757, 358, 762, 552, 844, 741, 686, 787, 346, 306, 776, 859, 899, 585, 560, 282,
        679, 577, 61, 780, 553, 463, 28, 792, 183, 854, 461, 609, 533, 510, 149, 425, 180, 621, 812, 600,
        20, 632, 805, 305, 407, 31, 921, 847, 329, 148, 843, 785, 516, 213, 166, 138, 995, 732, 985, 562,
        136, 523, 965, 109, 918, 220, 733, 743, 433, 2, 705, 452, 926, 528, 232, 543, 67, 231, 555, 47, 385,
        886, 752, 579, 413, 87, 14, 435, 69, 465, 445, 949, 351, 656, 348, 532, 581, 326, 11, 817, 333, 262,
        659, 197, 953, 631, 429, 273, 958, 909, 580, 968, 281, 497, 472, 954, 536, 379, 980, 204, 364, 155,
        495, 588, 373, 314, 111, 85, 147, 75, 396, 173, 355, 410, 84, 124, 749, 889, 808, 673, 48, 649, 218,
        494, 141, 981, 650, 848, 21, 979, 384, 303, 506, 826, 663, 724, 264, 376, 661, 474, 864, 22, 57, 208,
        747, 725, 293, 652, 789, 727, 185, 318, 558, 922, 375, 158, 639, 504, 207, 432, 488, 745, 92, 884, 761,
        879, 260, 493, 298, 121, 228, 619, 676, 704, 344, 381, 96, 687, 591, 606, 858, 990, 840, 764, 229, 53,
        118, 214, 897, 319, 378, 978, 247, 645, 129, 530, 873, 215, 538, 427, 998, 135, 236, 77, 662, 437, 907,
        80, 243, 831, 655, 622, 624, 422, 667, 71, 209, 134, 132, 706, 3, 914, 41, 701, 417, 117, 12, 644, 292,
        315, 256, 296, 583, 182, 987, 593, 612, 738, 307, 251, 774, 535, 853, 927, 160, 244, 539, 394, 697, 753,
        114, 323, 615, 287, 912, 283, 568, 596, 106, 660, 940, 405, 934, 955, 308, 520, 489, 556, 190, 947, 827,
        105, 731, 479, 819, 73, 341, 23, 857, 184, 223, 509, 367, 948, 389, 174, 895, 420, 691, 448, 188, 925,
        939, 658, 664, 492, 503, 480, 499, 988, 547, 443, 310, 730, 79, 340, 501, 794, 742, 811, 486, 467, 423,
        253, 431, 508, 320, 116, 94, 573, 698, 97, 855, 242, 824, 758, 633, 564, 122, 942, 356, 916, 418, 714,
        875, 642, 153, 931, 398, 967, 372, 395, 684, 449, 115, 584, 500, 444, 271, 734, 481, 168, 156, 440, 336,
        300, 772, 735, 603, 957, 334, 430, 992, 716, 369, 887, 983, 807, 10, 505, 595, 125, 442, 502, 906, 304,
        72, 294, 524, 800, 582, 402, 101, 330, 279, 219, 932, 142, 531, 206, 483, 567, 511, 692, 128, 601, 946,
        324, 354, 690, 393, 890, 517, 545, 670, 877, 49, 626, 328, 551, 302, 345, 542, 869, 36, 428, 63, 192,
        170, 403, 680, 9, 275, 464, 782, 392, 537, 883, 862, 728, 754, 40, 868, 513, 397, 470, 15, 576, 777,
        737, 76, 746, 856, 975, 462, 627, 563, 221, 668, 788, 159, 288, 554, 202, 255, 682, 874, 518, 177, 943,
        250, 313, 736, 119, 565, 654, 471, 100, 46, 809, 915, 352, 278, 186, 616, 575, 756, 25, 678, 586, 598,
        44, 546, 496, 226, 823, 718, 637, 771, 893, 748, 239, 35, 643, 419, 233, 78, 66, 350, 834, 269, 561, 891,
        768, 163, 810, 140, 196, 26, 647, 39, 230, 137, 120, 193, 18, 280, 404, 608, 872, 739, 409, 769, 98, 683,
        572, 363, 689, 729, 237, 870, 476, 861, 695, 457, 860, 852, 83, 820, 421, 880, 526, 368, 534, 904, 722,
        590, 703, 357, 5, 557, 456, 885, 952, 426, 937, 699, 669, 574, 487, 198, 894, 723, 717, 322, 707, 522,
        991, 485, 64, 45, 146, 905, 835, 391, 108, 602, 91, 666, 55, 696, 950, 167, 162, 388, 548, 923, 338, 316,
        24, 515, 976, 359, 599, 933, 70, 33, 613, 525, 459, 406, 81, 32, 924, 51, 441, 473, 424, 374, 544, 88,
        711, 675, 241, 969, 13, 709, 951, 796, 974, 107, 446, 945, 821, 150, 960, 833, 959, 839, 803, 235, 469,
        527, 342, 276, 549, 366, 194, 436, 216, 169, 814, 806, 665, 559, 477, 863, 541, 475, 195, 694, 881, 589,
        571, 161, 825, 205, 896, 850, 337, 52, 455, 908, 291, 16, 460, 238, 145, 993, 700, 607, 813, 822, 225,
        770, 849, 453, 681, 187, 999, 38, 482, 793, 944, 750, 971, 82, 866, 297, 876, 712, 466, 126, 383, 277,
        996, 984, 268, 638, 248, 685, 29, 309, 257, 763, 311, 349, 634, 380, 865, 133, 919, 199, 514, 888, 99,
        900, 816, 65, 112, 387, 339, 362, 1, 721, 625, 123, 846, 451, 920, 438, 898, 620, 569, 837, 710, 58,
        963, 212, 43, 62, 227, 578, 217, 240, 34, 802, 997, 911, 519, 165, 30, 529, 646, 702, 611, 390, 913,
        941, 102, 902, 744, 178, 972, 910, 312, 832, 871, 842, 203, 325, 399, 360, 614, 86, 439, 636, 989,
        605, 818, 798, 973, 201, 8, 131, 478, 317, 267, 784, 841, 778, 994, 130, 484, 295, 851, 623, 775,
        249, 272, 210, 382, 540, 50, 783, 258, 60, 766, 693, 19, 266, 610, 321, 370, 191, 767, 274, 152,
        801, 719, 815, 641, 838, 450, 964, 674, 222, 498, 617, 139, 720, 635, 597, 867, 629, 335, 765,
        59, 781, 400, 458, 630, 90, 935, 507, 110, 977, 332, 648, 845, 892, 773, 301, 261, 270, 412,
        786, 791, 113, 200, 353, 751, 246, 254, 966, 454, 672, 930, 401, 759, 594, 799, 299, 829, 189,
        416, 928, 408, 512, 211, 127, 27, 157, 986, 172, 414, 179, 151, 447, 715, 54, 89, 290, 901,
        828, 411, 604, 56, 265, 797};
    //duplicates
    int arr12[]={297, 22, 15, 22, 488, 97, 220, 291, 114, 371, 90, 451, 142, 7, 275, 145, 187, 141, 312, 
        49, 202, 264, 248, 15, 463, 173, 352, 99, 342, 141, 125, 373, 19, 68, 223, 413, 244, 322, 
        173, 73, 15, 14, 378, 189, 268, 99, 146, 101, 78, 486, 6, 299, 16, 240, 293, 268, 4, 241, 
        196, 388, 238, 471, 259, 209, 374, 6, 292, 450, 88, 38, 77, 192, 264, 185, 150, 45, 499, 67, 
        130, 242, 258, 385, 303, 44, 145, 84, 79, 187, 170, 161, 135, 249, 348, 99, 14, 31, 394, 77, 
        257, 72, 99, 203, 203, 479, 134, 392, 190, 92, 6, 367, 91, 369, 222, 176, 4, 4, 55, 87, 24, 
        274, 40, 238, 132, 408, 231, 237, 38, 274, 181, 52, 6, 124, 27, 479, 297, 226, 280, 161, 90, 
        463, 189, 129, 50, 256, 98, 475, 238, 42, 66, 310, 118, 116, 163, 363, 44, 164, 1, 185, 33, 
        206, 27, 186, 287, 407, 54, 55, 317, 42, 30, 493, 86, 227, 294, 157, 313, 227, 337, 369, 92, 
        177, 5, 36, 3, 415, 59, 229, 47, 69, 44, 451, 495, 471, 30, 172, 47, 12, 499, 116, 63, 399, 
        28, 394, 235, 284, 95, 154, 38, 92, 164, 147, 358, 271, 282, 486, 44, 106, 56, 16, 25, 9, 
        254, 114, 121, 239, 338, 453, 159, 45, 75, 70, 233, 106, 148, 115, 172, 24, 209, 149, 51, 
        142, 295, 115, 212, 71, 226, 10, 196, 60, 49, 374, 255, 277, 420, 364, 405, 462, 232, 366,
        152, 372, 75, 24, 329, 326, 477, 34, 218, 222, 496, 196, 99, 92, 11, 341, 177, 46, 217, 396, 
        328, 297, 231, 196, 27, 52, 3, 308, 183, 332, 221, 375, 75, 20, 162, 42, 170, 47, 183, 277, 
        153, 78, 86, 253, 317, 232, 173, 329, 463, 358, 253, 163, 295, 71, 37, 327, 288, 282, 104, 56, 
        353, 327, 276, 54, 344, 99, 185, 493, 49, 64, 222, 192, 470, 1, 385, 180, 143, 20, 109, 249, 
        495, 285, 373, 56, 129, 135, 210, 43, 469, 9, 399, 104, 285, 347, 44, 397, 264, 76, 434, 297, 
        117, 249, 77, 63, 77, 345, 91, 47, 25, 203, 48, 438, 142, 119, 77, 117, 63, 59, 162, 408, 60, 
        3, 273, 20, 132, 225, 60, 200, 165, 63, 291, 88, 173, 392, 263, 207, 274, 171, 198, 38, 17, 
        374, 283, 238, 14, 160, 299, 172, 420, 306, 32, 302, 257, 250, 405, 24, 125, 1, 134, 7, 209, 
        92, 67, 136, 109, 72, 372, 301, 211, 155, 29, 476, 392, 120, 119, 353, 355, 271, 237, 125, 
        413, 173, 191, 182, 77, 350, 464, 228, 193, 252, 368, 482, 445, 292, 378, 299, 415, 151, 295, 
        174, 84, 163, 408, 372, 208, 332, 420, 47, 109, 206, 385, 83, 157, 282, 77, 164, 117, 33, 21, 
        238, 137, 26, 265, 90, 133, 234, 482, 8, 22, 366, 334, 420, 404, 34, 141, 285, 142, 171, 305, 
        373, 287, 133, 284, 335, 145, 243, 30, 299, 181, 353, 62, 370, 217, 46, 404, 290, 397, 56, 158, 
        34, 285, 63, 57, 376, 487, 45, 4, 139, 188, 346, 80, 152, 108, 232, 440, 390, 319, 166, 282, 259, 
        307, 295, 413, 497, 191, 364, 52, 213, 164, 438, 205, 113, 94, 144, 182, 464, 249, 49, 44, 208, 377, 
        66, 16, 56, 490, 292, 119, 493, 78, 199, 30, 69, 455, 167, 244, 49, 165, 110, 58, 476, 90, 32, 105, 
        174, 157, 56, 115, 55, 6, 15, 181, 69, 254, 486, 198, 73, 144, 47, 14, 484, 164, 255, 32, 120, 281, 
        71, 99, 455, 213, 221, 197, 250, 389, 191, 117, 250, 487, 19, 240, 20, 490, 182, 43, 371, 267, 178, 
        32, 487, 444, 289, 156, 113, 91, 67, 307, 298, 99, 170, 183, 151, 394, 102, 202, 396, 191, 200, 221, 
        278, 407, 250, 153, 80, 12, 329, 1, 243, 27, 151, 337, 373, 217, 346, 397, 13, 57, 295, 300, 271, 
        38, 199, 230, 277, 160, 366, 495};

    int merges1 = 0;
    int swap1=0;
    int partitions1 = 0;
    int compares1=0;
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    unsigned long long start1, end1;
    // starts timer to track sorting method
    start1 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr1, 0, size1 - 1, merges1, partitions1,swap1,compares1);
    // ends timer and records time taken to sort array
    end1 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end1 - start1 << " microseconds to sort numbers1" << endl;
    cout << "Partitions numbers1: " << partitions1 << endl;
    cout << "Merges numbers1: " << merges1 << endl;
    cout <<"Swap numbers2: "<<swap1<<endl;
    cout<<"compares: "<<compares1<<endl<<endl;

    // numbers2
    int merges2 = 0;
    int swap2=0;
    int partitions2 = 0;
    int compares2=0;
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    unsigned long long start2, end2;
    // starts timer to track sorting method
    start2 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr2, 0, size2 - 1, merges2, partitions2,swap2,compares2);
    // ends timer and records time taken to sort array
    end2 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    //outputs wanted information
    cout << "it took: " << end2 - start2 << " microseconds to sort numbers2" << endl;
    cout << "Partitions numbers2: " << partitions2 << endl;
    cout << "Merges numbers2: " << merges2 << endl;
    cout <<"Swap numbers2: "<<swap2<<endl;
    cout<<"compares: "<<compares2<<endl<<endl;

    // numbers3
    int merges3 = 0;
    int swap3=0;
    int partitions3 = 0;
    int compares3=0;
    int size3 = sizeof(arr3) / sizeof(arr3[0]);
    unsigned long long start3, end3;

    // starts timer to track sorting method
    start3 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr3, 0, size3 - 1, merges3, partitions3,swap3,compares3);
    // ends timer and records time taken to sort array
    end3 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end3 - start3 << " microseconds to sort numbers3" << endl;
    cout << "Partitions numbers3: " << partitions3 << endl;
    cout << "Merges numbers3: " << merges3 << endl;
    cout <<"Swap numbers3: "<<swap3<<endl;
    cout<<"compares: "<<compares3<<endl<<endl;

    // numbers4
    int merges4 = 0;
    int swap4=0;
    int partitions4 = 0;
    int compares4=0;
    int size4 = sizeof(arr4) / sizeof(arr4[0]);
    unsigned long long start4, end4;
    // starts timer to track sorting method
    start4 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr4, 0, size4 - 1, merges4, partitions4,swap4,compares4);
    // ends timer and records time taken to sort array
    end4 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end4 - start4 << " microseconds to sort numbers4" << endl;
    cout << "Partitions numbers4: " << partitions4 << endl;
    cout << "Merges numbers4: " << merges4 << endl;
    cout <<"Swap numbers4: "<<swap4<<endl;
    cout<<"compares: "<<compares4<<endl<<endl;

    // numbers5
    int merges5 = 0;
    int swap5=0;
    int partitions5 = 0;
    int compares5=0;
    int size5 = sizeof(arr5) / sizeof(arr5[0]);
    unsigned long long start5, end5;
    // starts timer to track sorting method
    start5 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr5, 0, size5 - 1, merges5, partitions5,swap5,compares5);
    // ends timer and records time taken to sort array
    end5 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end5 - start5 << " microseconds to sort numbers5" << endl;
    cout << "Partitions numbers5: " << partitions5 << endl;
    cout << "Merges numbers5: " << merges5 << endl;
    cout <<"Swap numbers5: "<<swap5<<endl;
    cout<<"compares: "<<compares5<<endl<<endl;

    // numbers6
    int merges6 = 0;
    int swap6=0;
    int partitions6 = 0;
    int compares6=0;
    int size6 = sizeof(arr6) / sizeof(arr6[0]);
    unsigned long long start6, end6;
    // starts timer to track sorting method
    start6 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr6, 0, size6 - 1, merges6, partitions6,swap6,compares6);
    // ends timer and records time taken to sort array
    end6 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end6 - start6 << " microseconds to sort numbers6" << endl;
    cout << "Partitions numbers6: " << partitions6 << endl;
    cout << "Merges numbers6: " << merges6 << endl;
    cout <<"Swap numbers6: "<<swap6<<endl;
    cout<<"compares: "<<compares6<<endl<<endl;

    // numbers7
    int merges7 = 0;
    int swap7=0;
    int partitions7 = 0;
    int compares7=0;
    int size7 = sizeof(arr7) / sizeof(arr7[0]);
    unsigned long long start7, end7;
    // starts timer to track sorting method
    start7 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr7, 0, size7 - 1, merges7, partitions7,swap7,compares7);
    // ends timer and records time taken to sort array
    end7 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end7 - start7 << " microseconds to sort numbers7" << endl;
    cout << "Partitions numbers7: " << partitions7 << endl;
    cout << "Merges numbers7: " << merges7 << endl;
    cout <<"Swap numbers7: "<<swap7<<endl;
    cout<<"compares: "<<compares7<<endl<<endl;

    // numbers8
    int merges8 = 0;
    int swap8=0;
    int partitions8 = 0;
    int compares8=0;
    int size8 = sizeof(arr8) / sizeof(arr8[0]);
    unsigned long long start8, end8;
    // starts timer to track sorting method
    start8 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr8, 0, size8 - 1, merges8, partitions8,swap8,compares8);
    // ends timer and records time taken to sort array
    end8 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end8 - start8 << " microseconds to sort array numbers8" << endl;
    cout << "Partitions numbers8: " << partitions8 << endl;
    cout << "Merges numbers8: " << merges8 << endl;
    cout <<"Swap numbers8: "<<swap8<<endl;
    cout<<"compares: "<<compares8<<endl<<endl;

    // numbers9
    int merges9 = 0;
    int swap9=0;
    int partitions9 = 0;
    int compares9=0;
    int size9 = sizeof(arr9) / sizeof(arr9[0]);
    unsigned long long start9, end9;
    // starts timer to track sorting method
    start9 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr9, 0, size9 - 1, merges9, partitions9,swap9,compares9);
    // ends timer and records time taken to sort array
    end9 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end9 - start9 << " microseconds to sort numbers9" << endl;
    cout << "Partitions numbers9: " << partitions9 << endl;
    cout << "Merges numbers9: " << merges9 << endl;
    cout <<"Swap numbers9: "<<swap9<<endl;
    cout<<"compares: "<<compares9<<endl<<endl;

    // numbers10
    int merges10 = 0;
    int swap10=0;
    int partitions10 = 0;
    int compares10=0;
    int size10 = sizeof(arr10) / sizeof(arr10[0]);
    unsigned long long start10, end10;
    // starts timer to track sorting method
    start10 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr10, 0, size10 - 1, merges10, partitions10,swap10,compares10);
    // ends timer and records time taken to sort array
    end10 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end10 - start10 << " microseconds to sort numbers10" << endl;
    cout << "Partitions numbers10: " << partitions10 << endl;
    cout << "Merges numbers10: " << merges10 << endl;
    cout <<"Swap numbers10: "<<swap10<<endl;
    cout<<"compares: "<<compares10<<endl<<endl;

    // numbers11
    int merges11 = 0;
    int swap11=0;
    int partitions11 = 0;
    int compares11=0;
    int size11 = sizeof(arr11) / sizeof(arr11[0]);
    unsigned long long start11, end11;
    // starts timer to track sorting method
    start11 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr11, 0, size11 - 1, merges11, partitions11,swap11,compares11);
    // ends timer and records time taken to sort array
    end11 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end11 - start11 << " microseconds to sort numbers11" << endl;
    cout << "Partitions numbers11: " << partitions11 << endl;
    cout << "Merges numbers11: " << merges11 << endl;
    cout <<"Swap numbers11: "<<swap11<<endl;
    cout<<"compares: "<<compares11<<endl<<endl;

    // numbers12
    int merges12 = 0;
    int swap12=0;
    int partitions12 = 0;
    int compares12=0;
    int size12 = sizeof(arr12) / sizeof(arr12[0]);
    unsigned long long start12, end12;
    // starts timer to track sorting method
    start12 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    mergeSort(arr12, 0, size12 - 1, merges12, partitions12,swap12,compares12);
    // ends timer and records time taken to sort array
    end12 = duration_cast<microseconds>(system_clock::now().time_since_epoch()).count();
    cout << "it took: " << end12 - start12 << " microseconds to sort numbers12" << endl;
    cout << "Partitions numbers12: " << partitions12 << endl;
    cout << "Merges numbers12: " << merges12 << endl;
    cout <<"Swap numbers12: "<<swap12<<endl;
    cout<<"compares: "<<compares12<<endl<<endl;
    return 0;
}
